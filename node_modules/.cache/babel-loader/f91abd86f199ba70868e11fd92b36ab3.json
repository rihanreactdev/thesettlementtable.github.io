{"ast":null,"code":"import axios from 'axios';\nimport store from '../store';\nimport { getSecureData } from \"../storage\"; // Set content type as JSON for all post requests.\n\naxios.defaults.headers.post['Content-Type'] = 'application/json';\nexport const axiosInstance = axios.create({\n  baseURL: 'https://api-stage.thesettlementtable.in',\n  timeout: 10000\n}); // Add a request interceptor\n\nconst requestInterceptor = {\n  onSuccess: async config => {\n    try {\n      console.log('Setting access token in axios for loggein users');\n      const isLoggedIn = store.getState().AppReducer.isLoggedIn;\n      const accessToken = getSecureData('token');\n\n      if (isLoggedIn) {\n        config.headers.Authorization = `JWT ${accessToken}`;\n      }\n    } catch (error) {\n      console.log('error in axios.interceptors.request', error);\n    }\n\n    console.log(\"req\", config);\n    return config;\n  },\n  onError: error => {\n    Promise.reject(error);\n  }\n};\naxiosInstance.interceptors.request.use(requestInterceptor.onSuccess, requestInterceptor.onError); // Add a response interceptor\n\nconst responseInterceptor = {\n  onSuccess: response => {\n    console.log(\"response\", response);\n\n    if (typeof response.data.success !== 'undefined' && response.data.success === false) {\n      return Promise.reject(new Error(response.data.message));\n    }\n\n    return response;\n  },\n  onError: async error => {\n    if (typeof error.response === 'undefined' || error.message === \"Network Error\") {\n      return Promise.reject(new Error(\"noIntenetMsg\"));\n    }\n\n    const originalRequest = error.config;\n    console.log('Api Failed: ', {\n      request: originalRequest,\n      response: error.response\n    });\n\n    if (error.response.status >= 500 && error.response.status <= 599) {\n      console.log(\"Error in ApiWrapper serverError\", error);\n      return Promise.reject(new Error(\"serverError\"));\n    }\n\n    console.log(\"Error in ApiWrapper\", error);\n    return Promise.reject(new Error(error.message));\n  }\n};\naxiosInstance.interceptors.response.use(responseInterceptor.onSuccess, responseInterceptor.onError);","map":{"version":3,"sources":["/home/rently/Desktop/settlementtable/settlementtable/src/apiWrapper/index.js"],"names":["axios","store","getSecureData","defaults","headers","post","axiosInstance","create","baseURL","timeout","requestInterceptor","onSuccess","config","console","log","isLoggedIn","getState","AppReducer","accessToken","Authorization","error","onError","Promise","reject","interceptors","request","use","responseInterceptor","response","data","success","Error","message","originalRequest","status"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport store from '../store';\nimport {getSecureData} from \"../storage\";\n\n// Set content type as JSON for all post requests.\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\nexport const axiosInstance = axios.create({\n  baseURL: 'https://api-stage.thesettlementtable.in',\n  timeout: 10000\n});\n\n// Add a request interceptor\nconst requestInterceptor = {\n  onSuccess: async (config) => {\n    try {\n      console.log('Setting access token in axios for loggein users');\n      const isLoggedIn = store.getState().AppReducer.isLoggedIn ;\n      const accessToken = getSecureData('token');\n\n      if (isLoggedIn) {\n        config.headers.Authorization = `JWT ${accessToken}`;\n      }\n\n    } catch (error) {\n      console.log('error in axios.interceptors.request', error);\n    }\n\n    console.log(\"req\", config);\n\n    return config;\n  },\n  onError:(error) => {\n    Promise.reject(error);\n  }\n};\n\naxiosInstance.interceptors.request.use(requestInterceptor.onSuccess, requestInterceptor.onError);\n\n// Add a response interceptor\nconst responseInterceptor = {\n  onSuccess:(response) => {\n      console.log(\"response\", response);\n\n    if (typeof (response.data.success) !== 'undefined' && response.data.success === false) {\n      return Promise.reject(new Error(response.data.message));\n    }\n\n    return response;\n  },\n  onError:async (error) => {\n    if (typeof (error.response) === 'undefined' || error.message === \"Network Error\") {\n      return Promise.reject(new Error(\"noIntenetMsg\"));\n    }\n    const originalRequest = error.config;\n    console.log('Api Failed: ',\n      { request: originalRequest,\n        response: error.response\n      });\n\n    if (error.response.status >=500 && error.response.status <=599) {\n      console.log(\"Error in ApiWrapper serverError\", error);\n\n      return Promise.reject(new Error(\"serverError\"));\n    }\n\n    console.log(\"Error in ApiWrapper\", error);\n\n    return Promise.reject(new Error(error.message));\n  }\n};\n\naxiosInstance.interceptors.response.use(responseInterceptor.onSuccess, responseInterceptor.onError);\n"]},"metadata":{},"sourceType":"module"}