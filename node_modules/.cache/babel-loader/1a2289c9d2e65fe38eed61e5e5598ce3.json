{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { registerApi, confirmOTPApi, loginApi, forgotPasswordApi, neutraLoginApi, neutralForgotPasswordApi, neutralConfirmOTPApi } from '../api';\nimport { REGISTER_STEP_ONE, REGISTER_STEP_TWO, REGISTER_STEP_ONE_SUCCESS, LOGIN, FORGOT_PASSWORD_STEP_ONE, FORGOT_PASSWORD_STEP_ONE_SUCCESS, NEUTRAL_LOGIN, FORGOT_PASSWORD_STEP_TWO } from \"../redux/authentication/actionTypes\";\nimport { USER_LOGGED_IN } from \"../redux/appReducer/actionTypes\";\nimport { setSecureData } from \"../storage\";\nimport { push } from 'connected-react-router';\nimport { NEUTRAL_FORGOT_PASSWORD_STEP_ONE, NEUTRAL_FORGOT_PASSWORD_STEP_ONE_SUCCESS, NEUTRAL_FORGOT_PASSWORD_STEP_TWO } from \"../redux/authentication/actionTypes\";\n\nfunction* loginSaga({\n  email,\n  password\n}) {\n  try {\n    const {\n      data\n    } = yield call(loginApi, {\n      user_name: email,\n      password\n    });\n    setSecureData('token', data.token);\n    yield put({\n      type: USER_LOGGED_IN\n    });\n    console.log(\"Login successful\");\n    yield put(push('/userdashboard/default'));\n  } catch (error) {\n    console.log(\"error in loginSaga\", error);\n    alert(error.message);\n  }\n}\n\nfunction* registerStepOneSaga({\n  name,\n  email\n}) {\n  try {\n    yield call(registerApi, {\n      first_name: name,\n      email\n    });\n    yield put({\n      type: REGISTER_STEP_ONE_SUCCESS\n    });\n    alert(\"Verification Code has been sent to your Registered Email\");\n  } catch (error) {\n    console.log(\"error in registerStepOneSaga\", error);\n    alert(\"Email already registered.\");\n  }\n}\n\nfunction* registerStepTwoSaga({\n  email,\n  otpCode,\n  password\n}) {\n  try {\n    yield call(confirmOTPApi, {\n      user_name: email,\n      otp_code: otpCode,\n      password\n    });\n    alert(\"Registered successfully\");\n  } catch (error) {\n    console.log(\"error in registerStepTwoSaga\", error);\n    alert(error.message);\n  }\n}\n\nfunction* forgotPasswordStepOneSaga({\n  email\n}) {\n  try {\n    yield call(forgotPasswordApi, {\n      user_name: email\n    });\n    yield put({\n      type: FORGOT_PASSWORD_STEP_ONE_SUCCESS\n    });\n    alert(\"Verification Code has been sent to your Registered Email\");\n  } catch (error) {\n    console.log(\"error in forgotPasswordStepOneSaga\", error);\n    alert(error.message);\n  }\n}\n\nfunction* forgotPasswordStepTwoSaga({\n  email,\n  otpCode,\n  password\n}) {\n  try {\n    yield call(confirmOTPApi, {\n      user_name: email,\n      otp_code: otpCode,\n      password\n    });\n    alert(\"Password changed successfully\");\n  } catch (error) {\n    console.log(\"error in forgotPasswordStepTwoSaga\", error);\n    alert(error.message);\n  }\n}\n\nfunction* neutralLoginSaga({\n  email,\n  password\n}) {\n  try {\n    const {\n      data\n    } = yield call(neutraLoginApi, {\n      user_name: email,\n      password\n    });\n    setSecureData('token', data.token);\n    console.log(\"Login successful\"); // yield put(push('/userdashboard/default'));\n  } catch (error) {\n    console.log(\"error in neutralLoginSaga\", error);\n    alert(error.message);\n  }\n}\n\nfunction* neutralForgotPasswordStepOneSaga({\n  email\n}) {\n  try {\n    yield call(neutralForgotPasswordApi, {\n      user_name: email\n    });\n    yield put({\n      type: NEUTRAL_FORGOT_PASSWORD_STEP_ONE_SUCCESS\n    });\n    alert(\"Verification Code has been sent to your Registered Email\");\n  } catch (error) {\n    console.log(\"error in neutralForgotPasswordStepOneSaga\", error);\n    alert(error.message);\n  }\n}\n\nfunction* neutralForgotPasswordStepTwoSaga({\n  email,\n  otpCode,\n  password\n}) {\n  try {\n    yield call(neutralConfirmOTPApi, {\n      user_name: email,\n      otp_code: otpCode,\n      password\n    });\n    alert(\"Password changed successfully\");\n  } catch (error) {\n    console.log(\"error in neutralForgotPasswordStepTwoSaga\", error);\n    alert(error.message);\n  }\n}\n\nexport function* authenticationSaga() {\n  yield takeLatest(LOGIN, loginSaga);\n  yield takeLatest(REGISTER_STEP_ONE, registerStepOneSaga);\n  yield takeLatest(REGISTER_STEP_TWO, registerStepTwoSaga);\n  yield takeLatest(FORGOT_PASSWORD_STEP_ONE, forgotPasswordStepOneSaga);\n  yield takeLatest(FORGOT_PASSWORD_STEP_TWO, forgotPasswordStepTwoSaga);\n  yield takeLatest(NEUTRAL_LOGIN, neutralLoginSaga);\n  yield takeLatest(NEUTRAL_FORGOT_PASSWORD_STEP_ONE, neutralForgotPasswordStepOneSaga);\n  yield takeLatest(NEUTRAL_FORGOT_PASSWORD_STEP_TWO, neutralForgotPasswordStepTwoSaga);\n}","map":{"version":3,"sources":["/home/rently/Desktop/settlementtable/settlementtable/src/sagas/authenticationSaga.js"],"names":["call","put","takeLatest","registerApi","confirmOTPApi","loginApi","forgotPasswordApi","neutraLoginApi","neutralForgotPasswordApi","neutralConfirmOTPApi","REGISTER_STEP_ONE","REGISTER_STEP_TWO","REGISTER_STEP_ONE_SUCCESS","LOGIN","FORGOT_PASSWORD_STEP_ONE","FORGOT_PASSWORD_STEP_ONE_SUCCESS","NEUTRAL_LOGIN","FORGOT_PASSWORD_STEP_TWO","USER_LOGGED_IN","setSecureData","push","NEUTRAL_FORGOT_PASSWORD_STEP_ONE","NEUTRAL_FORGOT_PASSWORD_STEP_ONE_SUCCESS","NEUTRAL_FORGOT_PASSWORD_STEP_TWO","loginSaga","email","password","data","user_name","token","type","console","log","error","alert","message","registerStepOneSaga","name","first_name","registerStepTwoSaga","otpCode","otp_code","forgotPasswordStepOneSaga","forgotPasswordStepTwoSaga","neutralLoginSaga","neutralForgotPasswordStepOneSaga","neutralForgotPasswordStepTwoSaga","authenticationSaga"],"mappings":"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","sourcesContent":["import {call,put,takeLatest} from \"redux-saga/effects\";\nimport {\n    registerApi,\n    confirmOTPApi,\n    loginApi,\n    forgotPasswordApi,\n    neutraLoginApi,\n    neutralForgotPasswordApi, neutralConfirmOTPApi\n} from '../api'\nimport {\n    REGISTER_STEP_ONE,\n    REGISTER_STEP_TWO,\n    REGISTER_STEP_ONE_SUCCESS,\n    LOGIN,\n    FORGOT_PASSWORD_STEP_ONE,\n    FORGOT_PASSWORD_STEP_ONE_SUCCESS, NEUTRAL_LOGIN, FORGOT_PASSWORD_STEP_TWO\n} from \"../redux/authentication/actionTypes\";\nimport { USER_LOGGED_IN } from \"../redux/appReducer/actionTypes\";\nimport {setSecureData} from \"../storage\";\nimport { push } from 'connected-react-router'\nimport {\n    NEUTRAL_FORGOT_PASSWORD_STEP_ONE,\n    NEUTRAL_FORGOT_PASSWORD_STEP_ONE_SUCCESS,\n    NEUTRAL_FORGOT_PASSWORD_STEP_TWO\n} from \"../redux/authentication/actionTypes\";\n\nfunction* loginSaga({ email, password }) {\n    try{\n        const { data } = yield call(loginApi, { user_name: email, password });\n        setSecureData('token', data.token);\n        yield put({type : USER_LOGGED_IN});\n        console.log(\"Login successful\");\n        yield put(push('/userdashboard/default'));\n    } catch(error) {\n        console.log(\"error in loginSaga\", error);\n        alert(error.message);\n    }\n}\n\nfunction* registerStepOneSaga({ name, email }) {\n    try{\n        yield call(registerApi, { first_name: name, email});\n        yield put({type : REGISTER_STEP_ONE_SUCCESS});\n        alert(\"Verification Code has been sent to your Registered Email\");\n    } catch(error) {\n        console.log(\"error in registerStepOneSaga\", error);\n        alert(\"Email already registered.\");\n    }\n}\n\nfunction* registerStepTwoSaga({ email, otpCode, password }) {\n    try{\n        yield call(confirmOTPApi, { user_name: email, otp_code: otpCode, password});\n        alert(\"Registered successfully\");\n    } catch(error) {\n        console.log(\"error in registerStepTwoSaga\", error);\n        alert(error.message);\n    }\n}\n\nfunction* forgotPasswordStepOneSaga({ email }) {\n    try {\n        yield call(forgotPasswordApi, { user_name: email});\n        yield put({type : FORGOT_PASSWORD_STEP_ONE_SUCCESS});\n        alert(\"Verification Code has been sent to your Registered Email\");\n    } catch(error) {\n        console.log(\"error in forgotPasswordStepOneSaga\", error);\n        alert(error.message);\n    }\n}\n\nfunction* forgotPasswordStepTwoSaga({ email, otpCode, password }) {\n    try{\n        yield call(confirmOTPApi, { user_name: email, otp_code: otpCode, password});\n        alert(\"Password changed successfully\");\n    } catch(error) {\n        console.log(\"error in forgotPasswordStepTwoSaga\", error);\n        alert(error.message);\n    }\n}\n\nfunction* neutralLoginSaga({ email, password }) {\n    try{\n        const { data } = yield call(neutraLoginApi, { user_name: email, password });\n        setSecureData('token', data.token);\n        console.log(\"Login successful\");\n        // yield put(push('/userdashboard/default'));\n    } catch(error) {\n        console.log(\"error in neutralLoginSaga\", error);\n        alert(error.message);\n    }\n}\n\nfunction* neutralForgotPasswordStepOneSaga({ email }) {\n    try {\n        yield call(neutralForgotPasswordApi, { user_name: email});\n        yield put({type : NEUTRAL_FORGOT_PASSWORD_STEP_ONE_SUCCESS});\n        alert(\"Verification Code has been sent to your Registered Email\");\n    } catch(error) {\n        console.log(\"error in neutralForgotPasswordStepOneSaga\", error);\n        alert(error.message);\n    }\n}\n\nfunction* neutralForgotPasswordStepTwoSaga({ email, otpCode, password }) {\n    try{\n        yield call(neutralConfirmOTPApi, { user_name: email, otp_code: otpCode, password});\n        alert(\"Password changed successfully\");\n    } catch(error) {\n        console.log(\"error in neutralForgotPasswordStepTwoSaga\", error);\n        alert(error.message);\n    }\n}\n\nexport function* authenticationSaga() {\n    yield takeLatest(LOGIN, loginSaga)\n    yield takeLatest(REGISTER_STEP_ONE, registerStepOneSaga)\n    yield takeLatest(REGISTER_STEP_TWO, registerStepTwoSaga)\n    yield takeLatest(FORGOT_PASSWORD_STEP_ONE, forgotPasswordStepOneSaga)\n    yield takeLatest(FORGOT_PASSWORD_STEP_TWO, forgotPasswordStepTwoSaga)\n    yield takeLatest(NEUTRAL_LOGIN, neutralLoginSaga)\n    yield takeLatest(NEUTRAL_FORGOT_PASSWORD_STEP_ONE, neutralForgotPasswordStepOneSaga)\n    yield takeLatest(NEUTRAL_FORGOT_PASSWORD_STEP_TWO, neutralForgotPasswordStepTwoSaga)\n}\n"]},"metadata":{},"sourceType":"module"}